// Copyright (c) 2017 Vadim Macagon
// MIT License, see LICENSE file for full terms.

import { getEnv, process, types } from 'mobx-state-tree';

import { Omit } from '../../common/typescript-extensions';
import { AppDatabase, IRepositoryRecord } from './app-database';

/* tslint:disable:object-literal-sort-keys */
export const RepositoryModel = types.model('Repository', {
  /** Unique id (generated by the database). */
  id: types.number,
  /** The root directory of the repository. */
  localPath: types.string,
  /** Name to use when displaying the repository in the UI. */
  name: types.string
});

export type IRepositoryModel = typeof RepositoryModel.Type;
export type INewRepositoryInfo = Omit<IRepositoryModel, 'id'>;

export interface IRepositoryStoreEnv {
  /** The database the store should use for persistance. */
  db: AppDatabase;
}

/**
 * Stores information about local git repositories.
 *
 * The store contents are persisted to a local database.
 */
export const RepositoryStore = types
  .model('RepositoryStore', {
    repositories: types.array(RepositoryModel)
  })
  .actions(self => {
    const db = getEnv<IRepositoryStoreEnv>(self).db;

    function* addRepository(repoInfo: INewRepositoryInfo) {
      const id: number = yield db.repositoryTable.add(repoInfo);
      self.repositories.push(Object.assign({ id }, repoInfo));
      return id;
    }

    function* load() {
      type Record = IRepositoryRecord & { id: number };
      const repos: Record[] = yield db.repositoryTable.toArray();
      self.repositories.replace(repos);
    }

    // The type definition for the `process` function doesn't have a very useful return type
    // so gotta use a type assertion in most cases to make it a bit less vague.
    return {
      /**
       * Create a new repository with the given info and add it to the database.
       *
       * @return A promise that will be resolved with the id of the new repository.
       */
      addRepository: process(addRepository) as (repoInfo: INewRepositoryInfo) => Promise<number>,
      /**
       * Populate the store from the database.
       *
       * @return A promise that will be resolved when the operation completes.
       */
      load: process<void>(load)
    };
  });

export type IRepositoryStore = typeof RepositoryStore.Type;
